/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from ink.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var inkHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            include: "#comments"
        }, {
            token: [
                "meta.knot.declaration",
                "markup.punctuation",
                "meta.knot.declaration",
                "keyword.function",
                "meta.knot.declaration",
                "entity.name.knot",
                "meta.knot.declaration",
                "variable.parameter",
                "meta.knot.declaration",
                "markup.punctuation"
            ],
            regex: /^(\s*)(={2,})(\s*)((?:function)?)(\s*)(\w+)(\s*)((?:\([^)]*\))?)(\s*)((?:={1,})?)/
        }, {
            token: [
                "meta.stitch.declaration",
                "markup.punctuation",
                "meta.stitch.declaration",
                "keyword.function",
                "meta.stitch.declaration",
                "entity.name.knot",
                "meta.stitch.declaration"
            ],
            regex: /^(\s*)(=)(\s*)(\w+)(\s*)((?:\([^)$]*\))?)(\s*$)/
        }, {
            include: "#choice"
        }, {
            include: "#gather"
        }, {
            include: "#statements"
        }],
        "#TODO": [{
            token: [
                "comment.todo",
                "comment.todo.TODO",
                "comment.todo.TODO",
                "comment.todo",
                "comment.todo"
            ],
            regex: /^(\s*)(?:(TODO\s*:)|(TODO\b))(\s*)(.*)/
        }],
        "#choice": [{
            token: [
                "choice",
                "keyword.operator.weaveBullet.choice",
                "choice",
                "meta.label",
                "entity.name.label",
                "meta.label"
            ],
            regex: /^(\s*)((?:[\*\+]\s?)+)(\s*)(?:(\(\s*)(\w+)(\s*\)))?/,
            push: [{
                token: "choice",
                regex: /$/,
                next: "pop"
            }, {
                include: "#comments"
            }, {
                token: [
                    "keyword.operator.weaveBracket",
                    "string.content",
                    "keyword.operator.weaveBracket"
                ],
                regex: /(\[)([^\]]*)(\])/
            }, {
                include: "#divert"
            }, {
                include: "#mixedContent"
            }, {
                defaultToken: "choice"
            }]
        }],
        "#comments": [{
            token: "punctuation.definition.comment.json",
            regex: /\/\*\*/,
            push: [{
                token: "punctuation.definition.comment.json",
                regex: /\*\//,
                next: "pop"
            }, {
                defaultToken: "comment.block.documentation.json"
            }]
        }, {
            token: "punctuation.definition.comment.json",
            regex: /\/\*/,
            push: [{
                token: "punctuation.definition.comment.json",
                regex: /\*\//,
                next: "pop"
            }, {
                defaultToken: "comment.block.json"
            }]
        }, {
            token: [
                "punctuation.definition.comment.json",
                "comment.line.double-slash.js"
            ],
            regex: /(\/\/)(.*$)/
        }],
        "#divert": [{
            token: [
                "keyword.operator.divert",
                "meta.divert",
                "keyword.done",
                "keyword.end",
                "variable.divertTarget",
                "meta.divert"
            ],
            regex: /(->|<-)(\s*)(?:(?:(DONE)|(END)|(\w+))(?:\s*\.\s*\w+)*(\s*)(?:\([^\)]+\))?)?/
        }],
        "#gather": [{
            token: [
                "meta.gather",
                "keyword.operator.weaveBullet.gather",
                "meta.label",
                "entity.name.label",
                "meta.label"
            ],
            regex: /^(\s*)((?:-\s*)+)(?!>)(?:(\(\s*)(\w+)(\s*\)))?/
        }],
        "#globalVAR": [{
            token: [
                "meta.variable.assignment",
                "storage",
                "meta.variable.declaration",
                "entity.name.variable",
                "meta.variable.assignment"
            ],
            regex: /^(\s*)(VAR|CONST)(\s*)(\w+)(\s*)/,
            push: [{
                token: "meta.variable.assignment",
                regex: /$/,
                next: "pop"
            }, {
                defaultToken: "meta.variable.assignment"
            }]
        }],
        "#inlineConditional": [{
            token: [
                "keyword.operator.inlineConditionalStart",
                "entity.inlineConditional"
            ],
            regex: /(\{)([^:\|\}]+:)/,
            push: [{
                token: "keyword.operator.inlineConditionalEnd",
                regex: /\}/,
                next: "pop"
            }, {
                token: "keyword.operator.inlineConditionalBranchSeparator",
                regex: /\|/
            }, {
                include: "#mixedContent"
            }, {
                defaultToken: "entity.inlineConditional"
            }]
        }],
        "#inlineLogic": [{
            token: "keyword.operator.inlineLogicStart",
            regex: /\{/,
            push: [{
                token: "keyword.operator.inlineLogicEnd",
                regex: /\}/,
                next: "pop"
            }, {
                defaultToken: "meta.logic"
            }]
        }],
        "#inlineSequence": [{
            token: [
                "keyword.operator.inlineSequenceStart",
                "entity.inlineSequence",
                "keyword.operator.inlineSequenceTypeChar"
            ],
            regex: /(\{)(\s*)((?:~|&|!|\$)?)(?=[^\|]*\|(?!\|)[^\}]*\})/,
            push: [{
                token: "keyword.operator.inlineSequenceEnd",
                regex: /\}/,
                next: "pop"
            }, {
                token: "keyword.operator.inlineSequenceSeparator",
                regex: /\|(?!\|)/
            }, {
                include: "#mixedContent"
            }, {
                defaultToken: "entity.inlineSequence"
            }]
        }],
        "#logicLine": [{
            token: "meta.logic",
            regex: /\s*~\s*.*$/
        }],
        "#mixedContent": [{
            include: "#inlineConditional"
        }, {
            include: "#inlineSequence"
        }, {
            include: "#inlineLogic"
        }, {
            include: "#divert"
        }, {
            token: "constant.glue",
            regex: /<>/
        }],
        "#multiLineLogic": [{
            token: [
                "meta.multilineLogic",
                "keyword.operator.logic",
                "meta.multilineLogic",
                "keyword.operator.logic"
            ],
            regex: /^(\s*)(\{)(?:([\w_\s\*\/\-\+\&\|\%\<\>\.\(\)]+)(:))?(?=[^}]+$)/,
            push: [{
                token: "keyword.operator",
                regex: /\}/,
                next: "pop"
            }, {
                token: "conditional.else",
                regex: /^\s*else\s*\:/
            }, {
                token: [
                    "conditional.clause",
                    "keyword.operator",
                    "conditional.clause",
                    "keyword.operator"
                ],
                regex: /^(\s*)(-)(\s?[^:]+)(:)/,
                push: [{
                    token: "conditional.clause",
                    regex: /$/,
                    next: "pop"
                }, {
                    include: "#mixedContent"
                }, {
                    defaultToken: "conditional.clause"
                }]
            }, {
                include: "#statements"
            }, {
                defaultToken: "meta.multilineLogic"
            }]
        }],
        "#statements": [{
            include: "#comments"
        }, {
            include: "#TODO"
        }, {
            include: "#globalVAR"
        }, {
            include: "#choice"
        }, {
            include: "#gather"
        }, {
            include: "#multiLineLogic"
        }, {
            include: "#endOfSection"
        }, {
            include: "#logicLine"
        }, {
            include: "#mixedContent"
        }]
    }
    
    this.normalizeRules();
};

inkHighlightRules.metaData = {
    fileTypes: ["ink", "ink2"],
    name: "ink",
    scopeName: "source.ink"
}


oop.inherits(inkHighlightRules, TextHighlightRules);

exports.inkHighlightRules = inkHighlightRules;
});